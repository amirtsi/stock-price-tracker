- name: Create a server
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
    aws_account_id: "{{ lookup('env', 'AWS_ACCOUNT_ID') }}"
    vpc_name: devops_final_vpc
    network: 10.0.0.0/16
    aws_region: eu-north-1
    subnet_cidr: 10.0.1.0/24
    subnet: eu-north-1a
    aws_amazon_ami: ami-0705384c0b33c194c
    Server_type: t3.micro
    keypair: devops_final
    server_volume_size: 20
    server_name: devops_final_ec2
    env: production

  tasks:
    - name: create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ network }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: present
        dns_hostnames: yes
        dns_support: yes
        multi_ok: no
        tags:
          Name: "{{ vpc_name }}"
      register: vpc

    - name: associate subnet to the VPC
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        cidr: "{{ subnet_cidr }}"
        map_public: yes
        az: "{{ subnet }}"
        resource_tags:
          Name: "{{ vpc_name }}"
        wait: yes
      register: subnet

    - name: create IGW
      amazon.aws.ec2_vpc_igw:
       vpc_id: "{{ vpc.vpc.id }}"
       region: "{{ aws_region }}"
       aws_access_key: "{{ aws_access_key }}"
       aws_secret_key: "{{ aws_secret_key }}"
       state: present
       tags:
         Name: "{{ vpc_name }}_igw"
      register: igw

    - name: Route table for public Subnet
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: present
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "{{ vpc_name }}_public_rt"

    - name: Create security group
      amazon.aws.ec2_security_group:
        name: "{{ vpc_name }} VPC SG"
        description: "{{ vpc_name }} VPC SG"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: present
        rules:
          - proto: tcp
            ports:
            - 80
            - 22
            cidr_ip: 0.0.0.0/0
      register: sg

    - name: Create server
      amazon.aws.ec2_instance:
        image_id: "{{ aws_amazon_ami }}"
        wait: yes
        instance_type: "{{ Server_type }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_group: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        key_name: "{{ keypair }}"
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_type: gp3
              volume_size: "{{ server_volume_size }}"
              delete_on_termination: true
        tags:
          Name: "{{ server_name }}"
          Environment: "{{ env }}"
        exact_count: 1
        wait_timeout: 300
        network:
          assign_public_ip: yes
        state: running
      register: server_ec2

    - name: get ip of instance
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "{{ server_name }}"
          instance-state-name: [ "running"]
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: ec2_data

    - name: Add server public IP to application host group
      add_host: hostname={{ ec2_data.instances[0].public_ip_address }} groups=app

    - name: Wait for SSH to start using external IP
      wait_for:
        host: "{{ ec2_data.instances[0].public_ip_address }}"
        port: 22
        timeout: 300

- name: Setup web server
  hosts: app
  user: ubuntu
  become: True
  gather_facts: True
  vars:
  tasks:
    - name: install base packages
      apt: 
        name: 
          - git
          - nginx
        state: present

    - name: restart nginx
      service:
        name: nginx
        state: restarted
        enabled: yes
