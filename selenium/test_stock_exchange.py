import os
import sys
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import Select, WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException
from time import sleep

class StockExchangeTest():
    def __init__(self, application_url: str) -> None:
        self.application_url = application_url
        options = Options()
        options.add_argument('--headless')  # Run in headless mode for CI
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        self.executable_driver = webdriver.Chrome(options=options)
        
    def init_webapp(self):
        self.executable_driver.get(self.application_url)

    def test_stock_change_button(self):
        """Test that stocks are changing."""
        button_element = '/html/body/div[1]/div/div/h2/select'
        WebDriverWait(self.executable_driver, 20).until(
            EC.element_to_be_clickable((By.XPATH, button_element))
        )
        select = Select(self.executable_driver.find_element(By.XPATH, button_element))
        sleep(2)

        # Check every stock that it's clickable
        for item in ['FB', 'IBM', 'TSLA', 'GOOGL', 'AMZN']:
            try:
                select.select_by_value(item)
                print(f'[SUCCESS] found value {item}')
                sleep(1)
            except Exception as e:
                print(f'[ERROR] Can\'t find value {item}: {e}')
                self.stop_webapp()
                sys.exit(1)

    def test_chart_exists(self):
        """Test that chart exists."""
        try:
            self.executable_driver.find_element(By.CLASS_NAME, 'js-plotly-plot')
            print("[SUCCESS] Chart exists")
        except NoSuchElementException:
            print("[ERROR] Chart not found")
            self.stop_webapp()
            sys.exit(1)
        
    def test_plot_navigation_bar(self):
        """Test that you can interact with the chart's navigation bar."""
        WebDriverWait(self.executable_driver, 20).until(
            EC.element_to_be_clickable((By.CLASS_NAME, 'js-plotly-plot'))
        )
        elements = {
            'zoom_in': '/html/body/div[1]/div/div/div/div/div/div[2]/div/div[3]/a[1]',
            'zoom_out': '/html/body/div[1]/div/div/div/div/div/div[2]/div/div[3]/a[2]'
        }
        for element_name, xpath in elements.items():
            try:
                self.executable_driver.find_element(By.XPATH, xpath).click()
                print(f'[SUCCESS] Successfully clicked on {element_name}')
                sleep(1)
            except Exception as e:
                print(f'[ERROR] Error clicking on {element_name}: {e}')
                self.stop_webapp()
                sys.exit(1)
        
    def test_download_chart_png(self):
        """Test download chart and that it was downloaded."""
        print("[INFO] Skipping download test in CI environment.")
        # Implement this test if downloads are feasible in your environment.

    def stop_webapp(self):
        self.executable_driver.quit()

if __name__ == "__main__":
    # Read the public IP from the file generated by Ansible
    try:
        with open('public_ip.txt', 'r') as f:
            public_ip = f.read().strip()
            if not public_ip:
                raise ValueError("Public IP address is empty.")
    except Exception as e:
        print(f"[ERROR] Failed to read public IP: {e}")
        sys.exit(1)

    application_url = f'http://{public_ip}'

    stock_test = StockExchangeTest(application_url)
    try:
        stock_test.init_webapp()
        stock_test.test_stock_change_button()
        stock_test.test_chart_exists()
        stock_test.test_plot_navigation_bar()
        stock_test.test_download_chart_png()
    except Exception as e:
        print(f"[ERROR] Test failed: {e}")
        sys.exit(1)
    finally:
        stock_test.stop_webapp()
