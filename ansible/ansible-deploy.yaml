---
- name: Provision stock-price-tracker environment on AWS
  hosts: localhost
  connection: local
  gather_facts: False

  vars:
    vpc_name: "stockpricer-vpc"
    network: "10.0.0.0/16"
    aws_region: "eu-north-1"
    subnet_cidr: "10.0.1.0/24"
    subnet: "eu-north-1a"
    keypair: "amir_niv_pk"
    aws_ubuntu_ami: "ami-04cdc91e49cb06165"
    server_type: "t3.medium"
    server_name: "stockpricetracker"
    ansible_ssh_private_key_file: "~/.ssh/amir_niv_pk.pem"
    server_volume_size: 20

  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ network }}"
        region: "{{ aws_region }}"
        state: present
        dns_hostnames: yes
        dns_support: yes
        tags:
          Name: "{{ vpc_name }}"
      register: vpc

    - name: Associate subnet to the VPC
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        cidr: "{{ subnet_cidr }}"
        map_public: yes
        az: "{{ subnet }}"
        resource_tags:
          Name: "{{ vpc_name }}"
        wait: yes
      register: subnet

    - name: Create IGW
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        tags:
          Name: "{{ vpc_name }}_igw"
      register: igw

    - name: Route table for public Subnet
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "{{ vpc_name }}_public_rt"

    - name: Create security group
      ec2_group:
        name: "{{ vpc_name }}-sg"
        description: "{{ vpc_name }} security group"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
      register: sg

    - name: Create EC2 instance
      amazon.aws.ec2_instance:
        image_id: "{{ aws_ubuntu_ami }}"
        wait: yes
        instance_type: "{{ server_type }}"
        region: "{{ aws_region }}"
        security_group: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        key_name: "{{ keypair }}"
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_type: gp3
              volume_size: "{{ server_volume_size }}"
              delete_on_termination: true
        tags:
          Name: "{{ server_name }}"
        exact_count: 1
        wait_timeout: 300
        network:
          assign_public_ip: yes
        state: running
      register: server_ec2

    - name: Get public IP of instance
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "{{ server_name }}"
          instance-state-name: [ "running" ]
      register: ec2_data

    - name: Save public IP to a file
      copy:
        content: "{{ ec2_data.instances[0].public_ip_address }}"
        dest: ./public_ip.txt  

    - name: Output public IP
      debug:
        var: ec2_data.instances[0].public_ip_address

    - name: Add server public IP to application host group
      add_host: hostname={{ ec2_data.instances[0].public_ip_address }} groups=app

    - name: Wait for SSH to start using external IP
      wait_for:
        host: "{{ ec2_data.instances[0].public_ip_address }}"
        port: 22
        timeout: 300

    - name: Pause for ubuntu user access after boot
      ansible.builtin.pause:
        seconds: 30

##############################################################
- name: Setup Docker and stock-price-tracker with Docker Compose
  hosts: app
  user: ubuntu
  become: True
  gather_facts: False
  vars:
    docker_image: "linoyk/stock-price-tracker"
    docker_compose_version: "v2.12.2"

  tasks:
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      ansible.builtin.shell: wget -qO - https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    - name: Add Docker repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest
        update_cache: true

    - name: Install Docker Compose
      ansible.builtin.shell: |
        curl -L "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose

    - name: Verify Docker Compose version
      ansible.builtin.shell: docker-compose --version

    - name: Copy Docker Compose file to the server
      copy:
        src: ./docker-compose.yml
        dest: /home/ubuntu/docker-compose.yml

    - name: Run stock-price-tracker with Docker Compose
      ansible.builtin.shell: |
        cd /home/ubuntu
        docker-compose up -d
