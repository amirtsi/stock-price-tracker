---
- name: Deploy Infrastructure and Setup Web Server with Nginx
  hosts: localhost
  connection: local
  gather_facts: False

  vars:
    vpc_name: "stockpricer-vpc"
    network: "10.0.0.0/16"
    aws_region: "eu-north-1"
    subnet_cidr: "10.0.1.0/24"
    subnet: "eu-north-1a"
    keypair: "amir_niv_pk"
    aws_centos_ami: "ami-04cdc91e49cb06165"
    server_type: "t3.medium"
    server_name: "stockpricetracker"
    docker_image: "linoyk/stock-price-tracker"
    ansible_ssh_private_key_file: "~/.ssh/amir_niv_pk.pem"
    server_volume_size: 20  # Define as needed

  tasks:
    # VPC Creation
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ network }}"
        region: "{{ aws_region }}"
        state: present
        dns_hostnames: yes
        dns_support: yes
        tags:
          Name: "{{ vpc_name }}"
      register: vpc

    # Subnet Creation
    - name: Create Subnet and associate with VPC
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        cidr: "{{ subnet_cidr }}"
        map_public: yes
        az: "{{ subnet }}"
        resource_tags:
          Name: "{{ vpc_name }}"
        wait: yes
      register: subnet

    # Internet Gateway Creation
    - name: Create Internet Gateway (IGW)
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        tags:
          Name: "{{ vpc_name }}_igw"
      register: igw

    # Route Table for Public Subnet
    - name: Create Route Table for Public Subnet
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "{{ vpc_name }}_public_rt"

    # Security Group Creation
    - name: Create Security Group for VPC
      amazon.aws.ec2_security_group:
        name: "{{ vpc_name }} VPC SG"
        description: "Security group for {{ vpc_name }}"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        rules:
          - proto: tcp
            ports:
              - 22
              - 80
            cidr_ip: 0.0.0.0/0
      register: sg

    # EC2 Instance Creation
    - name: Create EC2 instance
      amazon.aws.ec2_instance:
        image_id: "{{ aws_centos_ami }}"
        instance_type: "{{ server_type }}"
        key_name: "{{ keypair }}"
        region: "{{ aws_region }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        security_group: "{{ sg.group_id }}"
        wait: yes
        exact_count: 1
        state: running
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_type: gp3
              volume_size: "{{ server_volume_size }}"
              delete_on_termination: true
        network:
          assign_public_ip: yes
        tags:
          Name: "{{ server_name }}"
      register: ec2_instance

    # Wait for SSH to Become Available
    - name: Wait for SSH to start on EC2 instance
      wait_for:
        host: "{{ ec2_instance.instances[0].public_ip_address }}"
        port: 22
        timeout: 300

    # Pause to Ensure Ubuntu User Access
    - name: Pause for ubuntu user access after boot
      ansible.builtin.pause:
        seconds: 30

    # Setup Application Server
    - name: Setup app server
      hosts: app
      user: ubuntu
      become: True
      gather_facts: False
      tasks:
        # Add Docker GPG Key
        - name: Add Docker GPG Key
          ansible.builtin.shell: wget -qO - https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

        # Add Docker Repository
        - name: Add Docker Repository
          apt_repository:
            repo: deb https://download.docker.com/linux/ubuntu jammy stable
            state: present

        # Install Docker
        - name: Install Docker
          apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: latest
            update_cache: true

        # Start Docker Service
        - name: Start Docker service
          ansible.builtin.service:
            name: "docker"
            enabled: true
            state: started

        # Pull Docker Image and Run Container with linoyk/stock-price-tracker
        - name: Run Docker container for stock price tracker app
          shell: "docker run -d -p 80:3000 -t --restart always --name stock-price-tracker {{ docker_image }}"

    # Output EC2 Instance Public IP
    - name: Output instance public IP
      debug:
        msg: "Instance public IP: {{ ec2_instance.instances[0].public_ip_address }}"
